name: Docker Build and Deploy

permissions:
  contents: write  # This allows creating releases
  packages: read   # This allows reading packages

on:
  # Only trigger this workflow on the main branch when everything is verified
  push:
    branches: [ main ]
  # Allow manual triggers
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'
      tag:
        description: 'Custom tag to use (default: latest)'
        required: false
        default: 'latest'
        type: string

jobs:
  # Re-run tests to ensure everything is OK before deploying
  verify:
    name: Verify Build and Tests
    runs-on: ubuntu-latest
    container:
      image: emscripten/emsdk:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y build-essential cmake git

      - name: Install GTest
        run: |
          git clone https://github.com/google/googletest.git /googletest
          cd /googletest
          mkdir build
          cd build
          cmake .. -DBUILD_GMOCK=OFF -DINSTALL_GTEST=ON
          make -j$(nproc)
          make install
          ldconfig

      - name: Build native and run tests
        run: |
          mkdir -p native_build
          cd native_build
          cmake .. -DCMAKE_BUILD_TYPE=Debug
          make -j$(nproc)
          ctest --output-on-failure

      - name: Build WebAssembly
        run: |
          mkdir -p wasm_build
          cd wasm_build
          emcmake cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          # Create web directory if needed for testing
          mkdir -p /app/web
          # Copy WebAssembly files to web directory
          cp -r *.js *.wasm *.html /app/web/ || true

      - name: Upload WASM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wasm-build
          path: |
            wasm_build/*.js
            wasm_build/*.wasm
            wasm_build/*.html
          retention-days: 7

  # Build and deploy Docker image
  docker-build-deploy:
    name: Docker Build and Deploy
    needs: verify
    if: success() || github.event.inputs.force_deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version
        id: extract_version
        run: |
          # Try to extract version from CMakeLists.txt
          if [ -f "CMakeLists.txt" ]; then
            VERSION=$(grep -E "VERSION [0-9]+" CMakeLists.txt | grep -oE "[0-9]+\.[0-9]+\.[0-9]+" || echo "")
          fi

          # If version not found or empty, try package.json
          if [ -z "$VERSION" ] && [ -f "package.json" ]; then
            VERSION=$(grep -E "\"version\":" package.json | grep -oE "[0-9]+\.[0-9]+\.[0-9]+" || echo "")
          fi

          # Default to latest if no version found
          if [ -z "$VERSION" ]; then
            VERSION="latest"
          fi

          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Lowercase Docker information
        id: docker_info
        run: |
          # Convert repository name to lowercase
          REPO_LC="${GITHUB_REPOSITORY,,}"
          echo "REPO_LC=$REPO_LC" >> $GITHUB_ENV

          # Determine tag to use
          TAG="${{ github.event.inputs.tag }}"
          if [ "$TAG" = "latest" ] || [ -z "$TAG" ]; then
            TAG="${{ env.VERSION }}"
          fi

          # Make sure we have a valid tag
          if [ -z "$TAG" ] || [ "$TAG" = "latest" ]; then
            TAG="latest"
          fi

          echo "TAG=$TAG" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.prod
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REPO_LC }}:${{ env.TAG }}
            ${{ env.REPO_LC }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main' && env.VERSION != 'latest'
        uses: softprops/action-gh-release@v1
        with:
          name: Release v${{ env.VERSION }}
          tag_name: v${{ env.VERSION }}
          generate_release_notes: true
          draft: false
